{
    "sourceFile": "controller/AdminAuth.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1719753091382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719753105972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,69 @@\n+const adminlogin = require(\"../models/adminlogin\");\r\n+module.exports={\r\n+    GetLogin : async (req, res) => {\r\n+        try {\r\n+            // Check if the admin is already logged in\r\n+            if (req.session.adminLoggedIn) {\r\n+                console.log(\"Already logged in\");\r\n+                 res.redirect('/admin');\r\n+            } else {\r\n+                // Admin is not logged in, render the login page\r\n+                res.render('admin/login', { layout: \"adminlayout\", adminlogin: true, adminlogErr: null });\r\n+            }\r\n+            // Admin is not logged in, render the login page\r\n+\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            res.status(500).send({ error: 'Server error' });\r\n+        }\r\n+    },\r\n+    \r\n+    PostLogin: async (req, res) => {\r\n+        try {\r\n+            console.log(req.body);\r\n+            const { email, password } = req.body;\r\n+\r\n+            const loginadmin = await adminlogin.findOne({ email });\r\n+            console.log(loginadmin,'logadm');\r\n+            if (!loginadmin) {\r\n+                return res.render('admin/login', { layout: 'adminlayout', adminlogin: true, adminlogErr: 'Email does not exist' });\r\n+            }else{\r\n+ \r\n+                let passwordCorrect\r\n+                if(password===loginadmin.password){\r\n+                    passwordCorrect=true\r\n+                }else{\r\n+                    passwordCorrect=false\r\n+                }\r\n+                // const passwordCorrect = await bcrypt.compare(password, loginadmin.password);\r\n+                if (!passwordCorrect) {\r\n+                    // res.render('admin/login', { layout: \"adminlayout\", adminlogin: true });\r\n+                    return res.render('admin/Login', { layout: 'adminlayout', adminlogin: true, adminlogErr: 'Incorrect password' });\r\n+              \r\n+                } else {\r\n+                    req.session.admin = email;\r\n+                    req.session.adminloggedIn = true;\r\n+                    req.session.admlogErr=false;\r\n+                    res.redirect('/admin/adgroup')\r\n+                }\r\n+    \r\n+            }\r\n+           \r\n+\r\n+\r\n+\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            // Handle the error appropriately, such as sending an error response to the client\r\n+        }\r\n+    },\r\n+    AdminLogout: async (req, res) => {\r\n+        try {\r\n+            req.session.adminloggedIn = false;\r\n+            res.redirect('/admin/login')\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+        }\r\n+\r\n+    },\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719753151921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+const adminlogin = require(\"../\");\r\n+\r\n+module.exports={\r\n+    GetLogin : async (req, res) => {\r\n+        try {\r\n+            // Check if the admin is already logged in\r\n+            if (req.session.adminLoggedIn) {\r\n+                console.log(\"Already logged in\");\r\n+                 res.redirect('/admin');\r\n+            } else {\r\n+                // Admin is not logged in, render the login page\r\n+                res.render('admin/login', { layout: \"adminlayout\", adminlogin: true, adminlogErr: null });\r\n+            }\r\n+            // Admin is not logged in, render the login page\r\n+\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            res.status(500).send({ error: 'Server error' });\r\n+        }\r\n+    },\r\n+    \r\n+    PostLogin: async (req, res) => {\r\n+        try {\r\n+            console.log(req.body);\r\n+            const { email, password } = req.body;\r\n+\r\n+            const loginadmin = await adminlogin.findOne({ email });\r\n+            console.log(loginadmin,'logadm');\r\n+            if (!loginadmin) {\r\n+                return res.render('admin/login', { layout: 'adminlayout', adminlogin: true, adminlogErr: 'Email does not exist' });\r\n+            }else{\r\n+ \r\n+                let passwordCorrect\r\n+                if(password===loginadmin.password){\r\n+                    passwordCorrect=true\r\n+                }else{\r\n+                    passwordCorrect=false\r\n+                }\r\n+                // const passwordCorrect = await bcrypt.compare(password, loginadmin.password);\r\n+                if (!passwordCorrect) {\r\n+                    // res.render('admin/login', { layout: \"adminlayout\", adminlogin: true });\r\n+                    return res.render('admin/Login', { layout: 'adminlayout', adminlogin: true, adminlogErr: 'Incorrect password' });\r\n+              \r\n+                } else {\r\n+                    req.session.admin = email;\r\n+                    req.session.adminloggedIn = true;\r\n+                    req.session.admlogErr=false;\r\n+                    res.redirect('/admin/adgroup')\r\n+                }\r\n+    \r\n+            }\r\n+           \r\n+\r\n+\r\n+\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            // Handle the error appropriately, such as sending an error response to the client\r\n+        }\r\n+    },\r\n+    AdminLogout: async (req, res) => {\r\n+        try {\r\n+            req.session.adminloggedIn = false;\r\n+            res.redirect('/admin/login')\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+        }\r\n+\r\n+    },\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719753157446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+const adminlogin = require(\"../model/adminlogin\");\r\n+\r\n+module.exports={\r\n+    GetLogin : async (req, res) => {\r\n+        try {\r\n+            // Check if the admin is already logged in\r\n+            if (req.session.adminLoggedIn) {\r\n+                console.log(\"Already logged in\");\r\n+                 res.redirect('/admin');\r\n+            } else {\r\n+                // Admin is not logged in, render the login page\r\n+                res.render('admin/login', { layout: \"adminlayout\", adminlogin: true, adminlogErr: null });\r\n+            }\r\n+            // Admin is not logged in, render the login page\r\n+\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            res.status(500).send({ error: 'Server error' });\r\n+        }\r\n+    },\r\n+    \r\n+    PostLogin: async (req, res) => {\r\n+        try {\r\n+            console.log(req.body);\r\n+            const { email, password } = req.body;\r\n+\r\n+            const loginadmin = await adminlogin.findOne({ email });\r\n+            console.log(loginadmin,'logadm');\r\n+            if (!loginadmin) {\r\n+                return res.render('admin/login', { layout: 'adminlayout', adminlogin: true, adminlogErr: 'Email does not exist' });\r\n+            }else{\r\n+ \r\n+                let passwordCorrect\r\n+                if(password===loginadmin.password){\r\n+                    passwordCorrect=true\r\n+                }else{\r\n+                    passwordCorrect=false\r\n+                }\r\n+                // const passwordCorrect = await bcrypt.compare(password, loginadmin.password);\r\n+                if (!passwordCorrect) {\r\n+                    // res.render('admin/login', { layout: \"adminlayout\", adminlogin: true });\r\n+                    return res.render('admin/Login', { layout: 'adminlayout', adminlogin: true, adminlogErr: 'Incorrect password' });\r\n+              \r\n+                } else {\r\n+                    req.session.admin = email;\r\n+                    req.session.adminloggedIn = true;\r\n+                    req.session.admlogErr=false;\r\n+                    res.redirect('/admin/adgroup')\r\n+                }\r\n+    \r\n+            }\r\n+           \r\n+\r\n+\r\n+\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            // Handle the error appropriately, such as sending an error response to the client\r\n+        }\r\n+    },\r\n+    AdminLogout: async (req, res) => {\r\n+        try {\r\n+            req.session.adminloggedIn = false;\r\n+            res.redirect('/admin/login')\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+        }\r\n+\r\n+    },\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719753529252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+const adminlogin = require(\"../model/adminlogin\");\r\n+\r\n+module.exports={\r\n+    GetLogin : async (req, res) => {\r\n+        try {\r\n+            // Check if the admin is already logged in\r\n+            if (req.session.adminLoggedIn) {\r\n+                console.log(\"Already logged in\");\r\n+                 res.redirect('/admin');\r\n+            } else {\r\n+                // Admin is not logged in, render the login page\r\n+                res.render('admin/login', { layout: \"adminlayout\", adminlogin: true, adminlogErr: null });\r\n+            }\r\n+            // Admin is not logged in, render the login page\r\n+\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            res.status(500).send({ error: 'Server error' });\r\n+        }\r\n+    },\r\n+    \r\n+    PostLogin: async (req, res) => {\r\n+        try {\r\n+            console.log(req.body);\r\n+            const { email, password } = req.body;\r\n+\r\n+            const loginadmin = await adminlogin.findOne({ email });\r\n+            console.log(loginadmin,'logadm');\r\n+            if (!loginadmin) {\r\n+                return res.render('admin/login', { layout: 'adminlayout', adminlogin: true, adminlogErr: 'Email does not exist' });\r\n+            }else{\r\n+ \r\n+                let passwordCorrect\r\n+                if(password===loginadmin.password){\r\n+                    passwordCorrect=true\r\n+                }else{\r\n+                    passwordCorrect=false\r\n+                }\r\n+                // const passwordCorrect = await bcrypt.compare(password, loginadmin.password);\r\n+                if (!passwordCorrect) {\r\n+                    // res.render('admin/login', { layout: \"adminlayout\", adminlogin: true });\r\n+                    return res.render('admin/Login', { layout: 'adminlayout', adminlogin: true, adminlogErr: 'Incorrect password' });\r\n+              \r\n+                } else {\r\n+                    req.session.admin = email;\r\n+                    req.session.adminloggedIn = true;\r\n+                    req.session.admlogErr=false;\r\n+                    res.redirect('/admin')\r\n+                }\r\n+    \r\n+            }\r\n+           \r\n+\r\n+\r\n+\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+            // Handle the error appropriately, such as sending an error response to the client\r\n+        }\r\n+    },\r\n+    AdminLogout: async (req, res) => {\r\n+        try {\r\n+            req.session.adminloggedIn = false;\r\n+            res.redirect('/admin/login')\r\n+        } catch (err) {\r\n+            console.log(err);\r\n+        }\r\n+\r\n+    },\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1719753091382,
            "name": "Commit-0",
            "content": "module.export"
        }
    ]
}